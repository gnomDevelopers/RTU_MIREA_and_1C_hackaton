version: "3.9"

networks:
  hackaton_app:
    name: "hackaton_network"
    driver: bridge

services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./.data/log/backend:/var/log/app
    restart: unless-stopped
    ports:
      - "127.0.0.1:10510:8080"
    healthcheck:
      test: ["CMD", "curl", "localhost:8080/health"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
      - promtail
      - loki
    networks:
      - hackaton_app

  frontend:
    container_name: frontend
    build:
      context: ./web
      dockerfile: Dockerfile
    volumes:
      - ./.data/log/frontend:/var/log/app
    restart: unless-stopped
    ports:
      - "127.0.0.1:10520:3000"
    networks:
      - hackaton_app

  loki:
    container_name: "loki"
    image: grafana/loki:2.9.2
    ports:
      - "127.0.0.1:10530:3100"
    volumes:
      - ./backend/internal/log/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
    command: -config.file=/etc/loki/loki-config.yml
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - hackaton_app

  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.2
    volumes:
      - ./backend/internal/log/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - hackaton_app

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_SECURITY_ANONYMOUS_ENABLED: "false"
      GF_AUTH_BASIC_ENABLED: "true"
      GF_USERS_ALLOW_SIGN_UP: "false"
      TG_BOT_TOKEN: "${TG_BOT_TOKEN}"
      TG_CHAT_ID: '"${TG_CHAT_ID}"'
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
    volumes:
      - ./backend/internal/log/grafana-provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./backend/internal/log/grafana-provisioning/alerting:/etc/grafana/provisioning/alerting:ro
    ports:
      - "127.0.0.1:10540:3000"
    depends_on:
      - loki
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - hackaton_app

  # PostgreSQL Database
  postgres:
    container_name: "postgres"
    image: postgres:14.7-alpine
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "${POSTGRESQL_DB}"
      POSTGRES_USER: "${POSTGRESQL_USER}"
      POSTGRES_PASSWORD: "${POSTGRESQL_PASSWORD}"
    volumes:
      - ./.data/postgres/dump:/docker-entrypoint-initdb.d/:ro
      - ./.data/postgres/postgresql:/var/lib/postgresql/
    ports:
      - "127.0.0.1:10550:5432"
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRESQL_USER} -d ${POSTGRESQL_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - hackaton_app

  redis:
    container_name: "redis"
    image: redis:6.2-alpine
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - ./.data/redis/data:/data
    ports:
      - "127.0.0.1:10560:6379"
    # command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - hackaton_app
