version: "3.8"

services:
  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: docker-socket-proxy
    networks:
      - app_network
    environment:
      CONTAINERS: 1
      SERVICES: 1
      TASKS: 1
      SWARM: 1
      EVENTS: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.endpoint=tcp://docker-socket-proxy:2375"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=hnnssssssly@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--accesslog=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/etc/letsencrypt:/letsencrypt"
    networks:
      - app_network
    depends_on:
      - docker-socket-proxy
      - backend
      - frontend
      - hr
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
      # resources:
      #   limits:
      #     cpus: "0.50"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    cap_drop:
      - ALL
    user: "1000:1000"

  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: frontend
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`gnomdeployer.ru`) && PathPrefix(`/`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs/frontend.log:/var/log/frontend.log
      - ./.env:/app/.env

  hr:
    build:
      context: ./HR
      dockerfile: Dockerfile
    container_name: hr
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hr.rule=Host(`hr.gnomdeployer.com`)"
      - "traefik.http.routers.hr.entrypoints=websecure"
      - "traefik.http.routers.hr.tls.certresolver=myresolver"
      - "traefik.http.services.hr.loadbalancer.server.port=80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs/hr.log:/var/log/hr.log
      - ./.env:/app/.env

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`gnomdeployer.ru`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.middlewares.backend-stripapi.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=backend-stripapi"
      - "traefik.http.routers.backend.priority=2"
    environment:
      - DATABASE_URL=postgresql://user:password@database:5432/db
    volumes:
      - ./logs/backend.log:/var/log/backend.log
      - ./.env:/app/.env
    depends_on:
      - database

  database:
    image: postgres:latest
    container_name: database
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=db
    volumes:
      - ./database/data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5436:${POSTGRESQL_PORT}"
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - app_network
    ports:
      - "6378:${REDIS_PORT}"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app_network
    volumes:
      - ./monitoring/grafana:/var/lib/grafana

  loki:
    image: grafana/loki:latest
    container_name: loki
    networks:
      - app_network
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    networks:
      - app_network
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml

networks:
  app_network:
    driver: bridge

volumes:
  database_data:
