version: "3.8"

networks:
  app_network:

services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
      - "/etc/letsencrypt:/etc/letsencrypt"
      - "./.volumes/frontend/dist:/usr/share/nginx/html"
    depends_on:
      - backend
    networks:
      - app_network

  db:
    image: postgres:16.3-alpine
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - "./.volumes/pg_data:/var/lib/postgresql/data"
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRESQL_DB}"
      POSTGRES_USER: "${POSTGRESQL_USER}"
      POSTGRES_PASSWORD: "${POSTGRESQL_PASSWORD}"
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRESQL_USER} -d ${POSTGRESQL_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_network

  backend:
    build:
      context: ./backend
    volumes:
      - "./volumes/backend:/app"
      - "../.env:/app/.env"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
    volumes:
      - "./.volumes/frontend/:/app"
    depends_on:
      - db
    networks:
      - app_network

  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - ./backend/internal/log/loki/loki-config.yml:/etc/loki/loki-config.yml
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - app_network

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - "/var/log/app:/var/log/app"
      - "./backend/internal/log/promtail/promtail-config.yml:/etc/promtail/config.yml"
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - app_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SECURITY_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - TG_BOT_TOKEN=${TG_BOT_TOKEN}
      - TG_CHAT_ID=${TG_CHAT_ID}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./backend/internal/log/grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./backend/internal/log/grafana-provisioning/alerting:/etc/grafana/provisioning/alerting
    depends_on:
      - loki
    networks:
      - app_network

  redis:
    image: redis:6.2-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./.data/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./.data/redis/data:/data
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - app_network
